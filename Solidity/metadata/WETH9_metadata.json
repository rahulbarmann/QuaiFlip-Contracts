"{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"ECDSAInvalidSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"ECDSAInvalidSignatureLength\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"ECDSAInvalidSignatureS\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"ERC2612ExpiredSignature\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"signer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ERC2612InvalidSigner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"currentNonce\",\"type\":\"uint256\"}],\"name\":\"InvalidAccountNonce\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidShortString\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"str\",\"type\":\"string\"}],\"name\":\"StringTooLong\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"EIP712DomainChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"Withdrawal\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"DOMAIN_SEPARATOR\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"eip712Domain\",\"outputs\":[{\"internalType\":\"bytes1\",\"name\":\"fields\",\"type\":\"bytes1\"},{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"version\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"verifyingContract\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"salt\",\"type\":\"bytes32\"},{\"internalType\":\"uint256[]\",\"name\":\"extensions\",\"type\":\"uint256[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseAllowance\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"nonces\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"permit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"wad\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"Wrapped Ether implementation for Quai Network This contract allows users to wrap their native QAI into an ERC20 token This is needed for DeFi protocols like Uniswap v3 that require ERC20 tokens\",\"errors\":{\"ECDSAInvalidSignature()\":[{\"details\":\"The signature derives the `address(0)`.\"}],\"ECDSAInvalidSignatureLength(uint256)\":[{\"details\":\"The signature has an invalid length.\"}],\"ECDSAInvalidSignatureS(bytes32)\":[{\"details\":\"The signature has an S value that is in the upper half order.\"}],\"ERC2612ExpiredSignature(uint256)\":[{\"details\":\"Permit deadline has expired.\"}],\"ERC2612InvalidSigner(address,address)\":[{\"details\":\"Mismatched signature.\"}],\"InvalidAccountNonce(address,uint256)\":[{\"details\":\"The nonce used for an `account` is not the expected current nonce.\"}]},\"events\":{\"EIP712DomainChanged()\":{\"details\":\"MAY be emitted to signal that the domain could have changed.\"}},\"kind\":\"dev\",\"methods\":{\"DOMAIN_SEPARATOR()\":{\"details\":\"Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\"},\"eip712Domain()\":{\"details\":\"See {IERC-5267}.\"},\"nonces(address)\":{\"details\":\"Returns the current nonce for `owner`. This value must be included whenever a signature is generated for {permit}. Every successful call to {permit} increases ``owner``'s nonce by one. This prevents a signature from being used multiple times.\"},\"permit(address,address,uint256,uint256,uint8,bytes32,bytes32)\":{\"details\":\"Sets `value` as the allowance of `spender` over ``owner``'s tokens, given ``owner``'s signed approval. IMPORTANT: The same issues {IERC20-approve} has related to transaction ordering also apply here. Emits an {Approval} event. Requirements: - `spender` cannot be the zero address. - `deadline` must be a timestamp in the future. - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner` over the EIP712-formatted function arguments. - the signature must use ``owner``'s current nonce (see {nonces}). For more information on the signature format, see the https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP section]. CAUTION: See Security Considerations above.\"},\"withdraw(uint256)\":{\"params\":{\"wad\":\"Amount to withdraw\"}}},\"title\":\"WETH9\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"deposit()\":{\"notice\":\"Deposit native token to get wrapped token\"},\"withdraw(uint256)\":{\"notice\":\"Withdraw wrapped token to get native token\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WETH9.sol\":\"WETH9\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"contracts/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n  /**\\n   * @dev Returns true if `account` is a contract.\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * It is unsafe to assume that an address for which this function returns\\n   * false is an externally-owned account (EOA) and not a contract.\\n   *\\n   * Among others, `isContract` will return false for the following\\n   * types of addresses:\\n   *\\n   *  - an externally-owned account\\n   *  - a contract in construction\\n   *  - an address where a contract will be created\\n   *  - an address where a contract lived, but was destroyed\\n   * ====\\n   *\\n   * [IMPORTANT]\\n   * ====\\n   * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n   *\\n   * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n   * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n   * constructor.\\n   * ====\\n   */\\n  function isContract(address account) internal view returns (bool) {\\n    // This method relies on extcodesize/address.code.length, which returns 0\\n    // for contracts in construction, since the code is only stored at the end\\n    // of the constructor execution.\\n\\n    return account.code.length > 0;\\n  }\\n\\n  /**\\n   * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n   * `recipient`, forwarding all available gas and reverting on errors.\\n   *\\n   * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n   * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n   * imposed by `transfer`, making them unable to receive funds via\\n   * `transfer`. {sendValue} removes this limitation.\\n   *\\n   * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n   *\\n   * IMPORTANT: because control is transferred to `recipient`, care must be\\n   * taken to not create reentrancy vulnerabilities. Consider using\\n   * {ReentrancyGuard} or the\\n   * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n   */\\n  function sendValue(address payable recipient, uint256 amount) internal {\\n    require(address(this).balance >= amount, 'Address: insufficient balance');\\n\\n    (bool success, ) = recipient.call{ value: amount }('');\\n    require(success, 'Address: unable to send value, recipient may have reverted');\\n  }\\n\\n  /**\\n   * @dev Performs a Solidity function call using a low level `call`. A\\n   * plain `call` is an unsafe replacement for a function call: use this\\n   * function instead.\\n   *\\n   * If `target` reverts with a revert reason, it is bubbled up by this\\n   * function (like regular Solidity function calls).\\n   *\\n   * Returns the raw returned data. To convert to the expected return value,\\n   * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n   *\\n   * Requirements:\\n   *\\n   * - `target` must be a contract.\\n   * - calling `target` with `data` must not revert.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionCall(target, data, 'Address: low-level call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n   * `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, 0, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but also transferring `value` wei to `target`.\\n   *\\n   * Requirements:\\n   *\\n   * - the calling contract must have an ETH balance of at least `value`.\\n   * - the called Solidity function must be `payable`.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n    return functionCallWithValue(target, data, value, 'Address: low-level call with value failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n   * with `errorMessage` as a fallback revert reason when `target` reverts.\\n   *\\n   * _Available since v3.1._\\n   */\\n  function functionCallWithValue(\\n    address target,\\n    bytes memory data,\\n    uint256 value,\\n    string memory errorMessage\\n  ) internal returns (bytes memory) {\\n    require(address(this).balance >= value, 'Address: insufficient balance for call');\\n    require(isContract(target), 'Address: call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n    return functionStaticCall(target, data, 'Address: low-level static call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a static call.\\n   *\\n   * _Available since v3.3._\\n   */\\n  function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n    require(isContract(target), 'Address: static call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.staticcall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n    return functionDelegateCall(target, data, 'Address: low-level delegate call failed');\\n  }\\n\\n  /**\\n   * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n   * but performing a delegate call.\\n   *\\n   * _Available since v3.4._\\n   */\\n  function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n    require(isContract(target), 'Address: delegate call to non-contract');\\n\\n    (bool success, bytes memory returndata) = target.delegatecall(data);\\n    return verifyCallResult(success, returndata, errorMessage);\\n  }\\n\\n  /**\\n   * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n   * revert reason using the provided one.\\n   *\\n   * _Available since v4.3._\\n   */\\n  function verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) internal pure returns (bytes memory) {\\n    if (success) {\\n      return returndata;\\n    } else {\\n      // Look for revert reason and bubble it up if present\\n      if (returndata.length > 0) {\\n        // The easiest way to bubble the revert reason is using memory via assembly\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n          let returndata_size := mload(returndata)\\n          revert(add(32, returndata), returndata_size)\\n        }\\n      } else {\\n        revert(errorMessage);\\n      }\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x5d644e232a4845661b26683f5f952d1b94c492f741ed09bd8ff075bd80f141da\",\"license\":\"MIT\"},\"contracts/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity 0.8.20;\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n  enum RecoverError {\\n    NoError,\\n    InvalidSignature,\\n    InvalidSignatureLength,\\n    InvalidSignatureS\\n  }\\n\\n  /**\\n   * @dev The signature derives the `address(0)`.\\n   */\\n  error ECDSAInvalidSignature();\\n\\n  /**\\n   * @dev The signature has an invalid length.\\n   */\\n  error ECDSAInvalidSignatureLength(uint256 length);\\n\\n  /**\\n   * @dev The signature has an S value that is in the upper half order.\\n   */\\n  error ECDSAInvalidSignatureS(bytes32 s);\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with `signature` or an error. This will not\\n   * return address(0) without also returning an error description. Errors are documented using an enum (error type)\\n   * and a bytes32 providing additional information about the error.\\n   *\\n   * If no error is returned, then the address can be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n   *\\n   * Documentation for signature generation:\\n   * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n   * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n   */\\n  function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n    if (signature.length == 65) {\\n      bytes32 r;\\n      bytes32 s;\\n      uint8 v;\\n      // ecrecover takes the signature parameters, and the only way to get them\\n      // currently is to use assembly.\\n      assembly ('memory-safe') {\\n        r := mload(add(signature, 0x20))\\n        s := mload(add(signature, 0x40))\\n        v := byte(0, mload(add(signature, 0x60)))\\n      }\\n      return tryRecover(hash, v, r, s);\\n    } else {\\n      return (address(0), RecoverError.InvalidSignatureLength, bytes32(signature.length));\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the address that signed a hashed message (`hash`) with\\n   * `signature`. This address can then be used for verification purposes.\\n   *\\n   * The `ecrecover` EVM precompile allows for malleable (non-unique) signatures:\\n   * this function rejects them by requiring the `s` value to be in the lower\\n   * half order, and the `v` value to be either 27 or 28.\\n   *\\n   * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n   * verification to be secure: it is possible to craft signatures that\\n   * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n   * this is by receiving a hash of the original message (which may otherwise\\n   * be too long), and then calling {MessageHashUtils-toEthSignedMessageHash} on it.\\n   */\\n  function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, signature);\\n    _throwError(error, errorArg);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n   *\\n   * See https://eips.ethereum.org/EIPS/eip-2098[ERC-2098 short signatures]\\n   */\\n  function tryRecover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n    unchecked {\\n      bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n      // We do not check for an overflow here since the shift operation results in 0 or 1.\\n      uint8 v = uint8((uint256(vs) >> 255) + 27);\\n      return tryRecover(hash, v, r, s);\\n    }\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n   */\\n  function recover(bytes32 hash, bytes32 r, bytes32 vs) internal pure returns (address) {\\n    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, r, vs);\\n    _throwError(error, errorArg);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function tryRecover(\\n    bytes32 hash,\\n    uint8 v,\\n    bytes32 r,\\n    bytes32 s\\n  ) internal pure returns (address recovered, RecoverError err, bytes32 errArg) {\\n    // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n    // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n    // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n    // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n    //\\n    // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n    // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n    // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n    // these malleable signatures as well.\\n    if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n      return (address(0), RecoverError.InvalidSignatureS, s);\\n    }\\n\\n    // If the signature is valid (and not malleable), return the signer address\\n    address signer = ecrecover(hash, v, r, s);\\n    if (signer == address(0)) {\\n      return (address(0), RecoverError.InvalidSignature, bytes32(0));\\n    }\\n\\n    return (signer, RecoverError.NoError, bytes32(0));\\n  }\\n\\n  /**\\n   * @dev Overload of {ECDSA-recover} that receives the `v`,\\n   * `r` and `s` signature fields separately.\\n   */\\n  function recover(bytes32 hash, uint8 v, bytes32 r, bytes32 s) internal pure returns (address) {\\n    (address recovered, RecoverError error, bytes32 errorArg) = tryRecover(hash, v, r, s);\\n    _throwError(error, errorArg);\\n    return recovered;\\n  }\\n\\n  /**\\n   * @dev Optionally reverts with the corresponding custom error according to the `error` argument provided.\\n   */\\n  function _throwError(RecoverError error, bytes32 errorArg) private pure {\\n    if (error == RecoverError.NoError) {\\n      return; // no error: do nothing\\n    } else if (error == RecoverError.InvalidSignature) {\\n      revert ECDSAInvalidSignature();\\n    } else if (error == RecoverError.InvalidSignatureLength) {\\n      revert ECDSAInvalidSignatureLength(uint256(errorArg));\\n    } else if (error == RecoverError.InvalidSignatureS) {\\n      revert ECDSAInvalidSignatureS(errorArg);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xbe5471b88742a967f6ca77a698f29521e5c81e64a13a4c814d77b48b4699f732\",\"license\":\"MIT\"},\"contracts/EIP712.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/EIP712.sol)\\n\\npragma solidity 0.8.20;\\n\\nimport { MessageHashUtils } from './MessageHashUtils.sol';\\nimport { ShortStrings, ShortString } from './ShortStrings.sol';\\nimport { IERC5267 } from './IERC5267.sol';\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-712[EIP-712] is a standard for hashing and signing of typed structured data.\\n *\\n * The encoding scheme specified in the EIP requires a domain separator and a hash of the typed structured data, whose\\n * encoding is very generic and therefore its implementation in Solidity is not feasible, thus this contract\\n * does not implement the encoding itself. Protocols need to implement the type-specific encoding they need in order to\\n * produce the hash of their typed data using a combination of `abi.encode` and `keccak256`.\\n *\\n * This contract implements the EIP-712 domain separator ({_domainSeparatorV4}) that is used as part of the encoding\\n * scheme, and the final step of the encoding to obtain the message digest that is then signed via ECDSA\\n * ({_hashTypedDataV4}).\\n *\\n * The implementation of the domain separator was designed to be as efficient as possible while still properly updating\\n * the chain id to protect against replay attacks on an eventual fork of the chain.\\n *\\n * NOTE: This contract implements the version of the encoding known as \\\"v4\\\", as implemented by the JSON RPC method\\n * https://docs.metamask.io/guide/signing-data.html[`eth_signTypedDataV4` in MetaMask].\\n *\\n * NOTE: In the upgradeable version of this contract, the cached values will correspond to the address, and the domain\\n * separator of the implementation contract. This will cause the {_domainSeparatorV4} function to always rebuild the\\n * separator from the immutable values, which is cheaper than accessing a cached version in cold storage.\\n *\\n * @custom:oz-upgrades-unsafe-allow state-variable-immutable\\n */\\nabstract contract EIP712 is IERC5267 {\\n  using ShortStrings for *;\\n\\n  bytes32 private constant TYPE_HASH = keccak256('EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)');\\n\\n  // Cache the domain separator as an immutable value, but also store the chain id that it corresponds to, in order to\\n  // invalidate the cached domain separator if the chain id changes.\\n  bytes32 private immutable _cachedDomainSeparator;\\n  uint256 private immutable _cachedChainId;\\n  address private immutable _cachedThis;\\n\\n  bytes32 private immutable _hashedName;\\n  bytes32 private immutable _hashedVersion;\\n\\n  ShortString private immutable _name;\\n  ShortString private immutable _version;\\n  string private _nameFallback;\\n  string private _versionFallback;\\n\\n  /**\\n   * @dev Initializes the domain separator and parameter caches.\\n   *\\n   * The meaning of `name` and `version` is specified in\\n   * https://eips.ethereum.org/EIPS/eip-712#definition-of-domainseparator[EIP-712]:\\n   *\\n   * - `name`: the user readable name of the signing domain, i.e. the name of the DApp or the protocol.\\n   * - `version`: the current major version of the signing domain.\\n   *\\n   * NOTE: These parameters cannot be changed except through a xref:learn::upgrading-smart-contracts.adoc[smart\\n   * contract upgrade].\\n   */\\n  constructor(string memory name, string memory version) {\\n    _name = name.toShortStringWithFallback(_nameFallback);\\n    _version = version.toShortStringWithFallback(_versionFallback);\\n    _hashedName = keccak256(bytes(name));\\n    _hashedVersion = keccak256(bytes(version));\\n\\n    _cachedChainId = block.chainid;\\n    _cachedDomainSeparator = _buildDomainSeparator();\\n    _cachedThis = address(this);\\n  }\\n\\n  /**\\n   * @dev Returns the domain separator for the current chain.\\n   */\\n  function _domainSeparatorV4() internal view returns (bytes32) {\\n    if (address(this) == _cachedThis && block.chainid == _cachedChainId) {\\n      return _cachedDomainSeparator;\\n    } else {\\n      return _buildDomainSeparator();\\n    }\\n  }\\n\\n  function _buildDomainSeparator() private view returns (bytes32) {\\n    return keccak256(abi.encode(TYPE_HASH, _hashedName, _hashedVersion, block.chainid, address(this)));\\n  }\\n\\n  /**\\n   * @dev Given an already https://eips.ethereum.org/EIPS/eip-712#definition-of-hashstruct[hashed struct], this\\n   * function returns the hash of the fully encoded EIP712 message for this domain.\\n   *\\n   * This hash can be used together with {ECDSA-recover} to obtain the signer of a message. For example:\\n   *\\n   * ```solidity\\n   * bytes32 digest = _hashTypedDataV4(keccak256(abi.encode(\\n   *     keccak256(\\\"Mail(address to,string contents)\\\"),\\n   *     mailTo,\\n   *     keccak256(bytes(mailContents))\\n   * )));\\n   * address signer = ECDSA.recover(digest, signature);\\n   * ```\\n   */\\n  function _hashTypedDataV4(bytes32 structHash) internal view virtual returns (bytes32) {\\n    return MessageHashUtils.toTypedDataHash(_domainSeparatorV4(), structHash);\\n  }\\n\\n  /**\\n   * @dev See {IERC-5267}.\\n   */\\n  function eip712Domain()\\n    public\\n    view\\n    virtual\\n    returns (\\n      bytes1 fields,\\n      string memory name,\\n      string memory version,\\n      uint256 chainId,\\n      address verifyingContract,\\n      bytes32 salt,\\n      uint256[] memory extensions\\n    )\\n  {\\n    return (\\n      hex'0f', // 01111\\n      _EIP712Name(),\\n      _EIP712Version(),\\n      block.chainid,\\n      address(this),\\n      bytes32(0),\\n      new uint256[](0)\\n    );\\n  }\\n\\n  /**\\n   * @dev The name parameter for the EIP712 domain.\\n   *\\n   * NOTE: By default this function reads _name which is an immutable value.\\n   * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function _EIP712Name() internal view returns (string memory) {\\n    return _name.toStringWithFallback(_nameFallback);\\n  }\\n\\n  /**\\n   * @dev The version parameter for the EIP712 domain.\\n   *\\n   * NOTE: By default this function reads _version which is an immutable value.\\n   * It only reads from storage if necessary (in case the value is too large to fit in a ShortString).\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function _EIP712Version() internal view returns (string memory) {\\n    return _version.toStringWithFallback(_versionFallback);\\n  }\\n}\\n\",\"keccak256\":\"0xddd1983679bbb12776d5d066df1e02cc2ff6cd435d4e13dfca9eab710d89dc86\",\"license\":\"MIT\"},\"contracts/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\nimport './Address.sol';\\nimport './IERC20.sol';\\nimport './IERC20Metadata.sol';\\nimport './EIP712.sol';\\nimport './Nonces.sol';\\nimport './IERC20Permit.sol';\\nimport './ECDSA.sol';\\n\\ncontract ERC20 is IERC20, IERC20Metadata, IERC20Permit, EIP712, Nonces {\\n  using Address for address;\\n\\n  bytes32 private constant PERMIT_TYPEHASH =\\n    keccak256('Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)');\\n\\n  /**\\n   * @dev Permit deadline has expired.\\n   */\\n  error ERC2612ExpiredSignature(uint256 deadline);\\n\\n  /**\\n   * @dev Mismatched signature.\\n   */\\n  error ERC2612InvalidSigner(address signer, address owner);\\n\\n  mapping(address => uint256) private _balances;\\n  mapping(address => mapping(address => uint256)) private _allowances;\\n  uint256 private _totalSupply;\\n  string private _name;\\n  string private _symbol;\\n\\n  constructor(string memory name_, string memory symbol_, uint256 totalSupply_) EIP712(name_, '1') {\\n    _name = name_;\\n    _symbol = symbol_;\\n    _mint(msg.sender, totalSupply_);\\n  }\\n\\n  function name() public view virtual override returns (string memory) {\\n    return _name;\\n  }\\n\\n  function symbol() public view virtual override returns (string memory) {\\n    return _symbol;\\n  }\\n\\n  function decimals() public view virtual override returns (uint8) {\\n    return 18;\\n  }\\n\\n  function totalSupply() public view virtual override returns (uint256) {\\n    return _totalSupply;\\n  }\\n\\n  function balanceOf(address account) public view virtual override returns (uint256) {\\n    return _balances[account];\\n  }\\n\\n  function transferFrom(address sender, address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(sender, recipient, amount);\\n\\n    uint256 currentAllowance = _allowances[sender][msg.sender];\\n    require(currentAllowance >= amount, 'ERC20: transfer amount exceeds allowance');\\n    unchecked {\\n      _approve(sender, msg.sender, currentAllowance - amount);\\n    }\\n\\n    return true;\\n  }\\n\\n  function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\\n    _transfer(msg.sender, recipient, amount);\\n    return true;\\n  }\\n\\n  function allowance(address owner, address spender) public view virtual override returns (uint256) {\\n    return _allowances[owner][spender];\\n  }\\n\\n  function approve(address spender, uint256 amount) public virtual override returns (bool) {\\n    _approve(msg.sender, spender, amount);\\n    return true;\\n  }\\n\\n  function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\\n    uint256 currentAllowance = _allowances[msg.sender][spender];\\n    require(currentAllowance >= subtractedValue, 'ERC20: decreased allowance below zero');\\n    unchecked {\\n      _approve(msg.sender, spender, currentAllowance - subtractedValue);\\n    }\\n\\n    return true;\\n  }\\n\\n  function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\\n    _approve(msg.sender, spender, _allowances[msg.sender][spender] + addedValue);\\n    return true;\\n  }\\n\\n  function _transfer(address sender, address recipient, uint256 amount) internal virtual {\\n    require(sender != address(0), 'ERC20: transfer from the zero address');\\n    require(recipient != address(0), 'ERC20: transfer to the zero address');\\n\\n    uint256 senderBalance = _balances[sender];\\n    require(senderBalance >= amount, 'ERC20: transfer amount exceeds balance');\\n    unchecked {\\n      _balances[sender] = senderBalance - amount;\\n    }\\n    _balances[recipient] += amount;\\n\\n    emit Transfer(sender, recipient, amount);\\n  }\\n\\n  function _mint(address account, uint256 amount) internal virtual {\\n    require(account != address(0), 'ERC20: mint to the zero address');\\n\\n    _totalSupply += amount;\\n    _balances[account] += amount;\\n    emit Transfer(address(0), account, amount);\\n  }\\n\\n  function _approve(address owner, address spender, uint256 amount) internal virtual {\\n    require(owner != address(0), 'ERC20: approve from the zero address');\\n    require(spender != address(0), 'ERC20: approve to the zero address');\\n\\n    _allowances[owner][spender] = amount;\\n    emit Approval(owner, spender, amount);\\n  }\\n\\n  /**\\n   * @inheritdoc IERC20Permit\\n   */\\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public virtual {\\n    if (block.timestamp > deadline) {\\n      revert ERC2612ExpiredSignature(deadline);\\n    }\\n\\n    bytes32 structHash = keccak256(abi.encode(PERMIT_TYPEHASH, owner, spender, value, _useNonce(owner), deadline));\\n\\n    bytes32 hash = _hashTypedDataV4(structHash);\\n\\n    address signer = ECDSA.recover(hash, v, r, s);\\n    if (signer != owner) {\\n      revert ERC2612InvalidSigner(signer, owner);\\n    }\\n\\n    _approve(owner, spender, value);\\n  }\\n\\n  /**\\n   * @inheritdoc IERC20Permit\\n   */\\n  function nonces(address owner) public view virtual override(IERC20Permit, Nonces) returns (uint256) {\\n    return super.nonces(owner);\\n  }\\n\\n  /**\\n   * @inheritdoc IERC20Permit\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view virtual returns (bytes32) {\\n    return _domainSeparatorV4();\\n  }\\n}\\n\",\"keccak256\":\"0x087cdf3c8ece637b4ce20ed6fc8adfec00e6f81740379890d2160d51fdb99b0e\",\"license\":\"MIT\"},\"contracts/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC20 {\\n  function totalSupply() external view returns (uint256);\\n  function balanceOf(address account) external view returns (uint256);\\n  function transfer(address recipient, uint256 amount) external returns (bool);\\n  function allowance(address owner, address spender) external view returns (uint256);\\n  function approve(address spender, uint256 amount) external returns (bool);\\n  function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x19ff814944b19de667d8b23abf52fb963755128a9c0416c657ff2ea2cb0fa3b1\",\"license\":\"MIT\"},\"contracts/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity 0.8.20;\\n\\nimport './IERC20.sol';\\n\\ninterface IERC20Metadata is IERC20 {\\n  function name() external view returns (string memory);\\n  function symbol() external view returns (string memory);\\n  function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0x01e3e51557d83c3ee40661312a528c4649f8b33b368fe11325e698946f9fb79d\",\"license\":\"MIT\"},\"contracts/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity 0.8.20;\\n\\n/**\\n * @dev Interface of the ERC-20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[ERC-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC-20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n  /**\\n   * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n   * given ``owner``'s signed approval.\\n   *\\n   * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n   * ordering also apply here.\\n   *\\n   * Emits an {Approval} event.\\n   *\\n   * Requirements:\\n   *\\n   * - `spender` cannot be the zero address.\\n   * - `deadline` must be a timestamp in the future.\\n   * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n   * over the EIP712-formatted function arguments.\\n   * - the signature must use ``owner``'s current nonce (see {nonces}).\\n   *\\n   * For more information on the signature format, see the\\n   * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n   * section].\\n   *\\n   * CAUTION: See Security Considerations above.\\n   */\\n  function permit(address owner, address spender, uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) external;\\n\\n  /**\\n   * @dev Returns the current nonce for `owner`. This value must be\\n   * included whenever a signature is generated for {permit}.\\n   *\\n   * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n   * prevents a signature from being used multiple times.\\n   */\\n  function nonces(address owner) external view returns (uint256);\\n\\n  /**\\n   * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n   */\\n  // solhint-disable-next-line func-name-mixedcase\\n  function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xeb1974f7bdff0599399a8749a0a3712659aabd57fbf62b5d017f6c767c61581d\",\"license\":\"MIT\"},\"contracts/IERC5267.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/IERC5267.sol)\\n\\npragma solidity 0.8.20;\\n\\ninterface IERC5267 {\\n  /**\\n   * @dev MAY be emitted to signal that the domain could have changed.\\n   */\\n  event EIP712DomainChanged();\\n\\n  /**\\n   * @dev returns the fields and values that describe the domain separator used by this contract for EIP-712\\n   * signature.\\n   */\\n  function eip712Domain()\\n    external\\n    view\\n    returns (\\n      bytes1 fields,\\n      string memory name,\\n      string memory version,\\n      uint256 chainId,\\n      address verifyingContract,\\n      bytes32 salt,\\n      uint256[] memory extensions\\n    );\\n}\\n\",\"keccak256\":\"0x79606f9b76243d9a9e8006625a48d6743131ec2d408b881121adc629b06cca99\",\"license\":\"MIT\"},\"contracts/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity 0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n  /**\\n   * @dev Muldiv operation overflow.\\n   */\\n  error MathOverflowedMulDiv();\\n\\n  enum Rounding {\\n    Floor, // Toward negative infinity\\n    Ceil, // Toward positive infinity\\n    Trunc, // Toward zero\\n    Expand // Away from zero\\n  }\\n\\n  /**\\n   * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n   */\\n  function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      uint256 c = a + b;\\n      if (c < a) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n   */\\n  function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b > a) return (false, 0);\\n      return (true, a - b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n   */\\n  function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n      // benefit is lost if 'b' is also tested.\\n      // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n      if (a == 0) return (true, 0);\\n      uint256 c = a * b;\\n      if (c / a != b) return (false, 0);\\n      return (true, c);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n   */\\n  function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a / b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n   */\\n  function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n    unchecked {\\n      if (b == 0) return (false, 0);\\n      return (true, a % b);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two numbers.\\n   */\\n  function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a > b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two numbers.\\n   */\\n  function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n    return a < b ? a : b;\\n  }\\n\\n  /**\\n   * @dev Returns the average of two numbers. The result is rounded towards\\n   * zero.\\n   */\\n  function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n    // (a + b) / 2 can overflow.\\n    return (a & b) + (a ^ b) / 2;\\n  }\\n\\n  /**\\n   * @dev Returns the ceiling of the division of two numbers.\\n   *\\n   * This differs from standard division with `/` in that it rounds towards infinity instead\\n   * of rounding towards zero.\\n   */\\n  function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n    if (b == 0) {\\n      // Guarantee the same behavior as in a regular Solidity division.\\n      return a / b;\\n    }\\n\\n    // (a + b - 1) / b can overflow on addition, so we distribute.\\n    return a == 0 ? 0 : (a - 1) / b + 1;\\n  }\\n\\n  /**\\n   * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n   * denominator == 0.\\n   * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n   * Uniswap Labs also under MIT license.\\n   */\\n  function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n    unchecked {\\n      // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n      // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n      // variables such that product = prod1 * 2^256 + prod0.\\n      uint256 prod0 = x * y; // Least significant 256 bits of the product\\n      uint256 prod1; // Most significant 256 bits of the product\\n      assembly {\\n        let mm := mulmod(x, y, not(0))\\n        prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n      }\\n\\n      // Handle non-overflow cases, 256 by 256 division.\\n      if (prod1 == 0) {\\n        // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n        // The surrounding unchecked block does not change this fact.\\n        // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n        return prod0 / denominator;\\n      }\\n\\n      // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n      if (denominator <= prod1) {\\n        revert MathOverflowedMulDiv();\\n      }\\n\\n      ///////////////////////////////////////////////\\n      // 512 by 256 division.\\n      ///////////////////////////////////////////////\\n\\n      // Make division exact by subtracting the remainder from [prod1 prod0].\\n      uint256 remainder;\\n      assembly {\\n        // Compute remainder using mulmod.\\n        remainder := mulmod(x, y, denominator)\\n\\n        // Subtract 256 bit number from 512 bit number.\\n        prod1 := sub(prod1, gt(remainder, prod0))\\n        prod0 := sub(prod0, remainder)\\n      }\\n\\n      // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n      // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n      uint256 twos = denominator & (0 - denominator);\\n      assembly {\\n        // Divide denominator by twos.\\n        denominator := div(denominator, twos)\\n\\n        // Divide [prod1 prod0] by twos.\\n        prod0 := div(prod0, twos)\\n\\n        // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n        twos := add(div(sub(0, twos), twos), 1)\\n      }\\n\\n      // Shift in bits from prod1 into prod0.\\n      prod0 |= prod1 * twos;\\n\\n      // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n      // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n      // four bits. That is, denominator * inv = 1 mod 2^4.\\n      uint256 inverse = (3 * denominator) ^ 2;\\n\\n      // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n      // works in modular arithmetic, doubling the correct bits in each step.\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n      inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n      // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n      // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n      // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n      // is no longer required.\\n      result = prod0 * inverse;\\n      return result;\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n   */\\n  function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n    uint256 result = mulDiv(x, y, denominator);\\n    if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n      result += 1;\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n   * towards zero.\\n   *\\n   * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n   */\\n  function sqrt(uint256 a) internal pure returns (uint256) {\\n    if (a == 0) {\\n      return 0;\\n    }\\n\\n    // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n    //\\n    // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n    // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n    //\\n    // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n    // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n    // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n    //\\n    // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n    uint256 result = 1 << (log2(a) >> 1);\\n\\n    // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n    // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n    // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n    // into the expected uint128 result.\\n    unchecked {\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      result = (result + a / result) >> 1;\\n      return min(result, a / result);\\n    }\\n  }\\n\\n  /**\\n   * @notice Calculates sqrt(a), following the selected rounding direction.\\n   */\\n  function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = sqrt(a);\\n      return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2 of a positive value rounded towards zero.\\n   * Returns 0 if given 0.\\n   */\\n  function log2(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >> 128 > 0) {\\n        value >>= 128;\\n        result += 128;\\n      }\\n      if (value >> 64 > 0) {\\n        value >>= 64;\\n        result += 64;\\n      }\\n      if (value >> 32 > 0) {\\n        value >>= 32;\\n        result += 32;\\n      }\\n      if (value >> 16 > 0) {\\n        value >>= 16;\\n        result += 16;\\n      }\\n      if (value >> 8 > 0) {\\n        value >>= 8;\\n        result += 8;\\n      }\\n      if (value >> 4 > 0) {\\n        value >>= 4;\\n        result += 4;\\n      }\\n      if (value >> 2 > 0) {\\n        value >>= 2;\\n        result += 2;\\n      }\\n      if (value >> 1 > 0) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n   * Returns 0 if given 0.\\n   */\\n  function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log2(value);\\n      return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10 of a positive value rounded towards zero.\\n   * Returns 0 if given 0.\\n   */\\n  function log10(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >= 10 ** 64) {\\n        value /= 10 ** 64;\\n        result += 64;\\n      }\\n      if (value >= 10 ** 32) {\\n        value /= 10 ** 32;\\n        result += 32;\\n      }\\n      if (value >= 10 ** 16) {\\n        value /= 10 ** 16;\\n        result += 16;\\n      }\\n      if (value >= 10 ** 8) {\\n        value /= 10 ** 8;\\n        result += 8;\\n      }\\n      if (value >= 10 ** 4) {\\n        value /= 10 ** 4;\\n        result += 4;\\n      }\\n      if (value >= 10 ** 2) {\\n        value /= 10 ** 2;\\n        result += 2;\\n      }\\n      if (value >= 10 ** 1) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n   * Returns 0 if given 0.\\n   */\\n  function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log10(value);\\n      return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256 of a positive value rounded towards zero.\\n   * Returns 0 if given 0.\\n   *\\n   * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n   */\\n  function log256(uint256 value) internal pure returns (uint256) {\\n    uint256 result = 0;\\n    unchecked {\\n      if (value >> 128 > 0) {\\n        value >>= 128;\\n        result += 16;\\n      }\\n      if (value >> 64 > 0) {\\n        value >>= 64;\\n        result += 8;\\n      }\\n      if (value >> 32 > 0) {\\n        value >>= 32;\\n        result += 4;\\n      }\\n      if (value >> 16 > 0) {\\n        value >>= 16;\\n        result += 2;\\n      }\\n      if (value >> 8 > 0) {\\n        result += 1;\\n      }\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n   * Returns 0 if given 0.\\n   */\\n  function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n    unchecked {\\n      uint256 result = log256(value);\\n      return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n   */\\n  function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n    return uint8(rounding) % 2 == 1;\\n  }\\n}\\n\",\"keccak256\":\"0xcf8f5280f971e12ae10964f9bf4b0c08c9ea45099838d79a72906479d32fbd50\",\"license\":\"MIT\"},\"contracts/MessageHashUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/cryptography/MessageHashUtils.sol)\\n\\npragma solidity 0.8.20;\\n\\nimport { Strings } from './Strings.sol';\\n\\n/**\\n * @dev Signature message hash utilities for producing digests to be consumed by {ECDSA} recovery or signing.\\n *\\n * The library provides methods for generating a hash of a message that conforms to the\\n * https://eips.ethereum.org/EIPS/eip-191[ERC-191] and https://eips.ethereum.org/EIPS/eip-712[EIP 712]\\n * specifications.\\n */\\nlibrary MessageHashUtils {\\n  /**\\n   * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n   * `0x45` (`personal_sign` messages).\\n   *\\n   * The digest is calculated by prefixing a bytes32 `messageHash` with\\n   * `\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\"` and hashing the result. It corresponds with the\\n   * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n   *\\n   * NOTE: The `messageHash` parameter is intended to be the result of hashing a raw message with\\n   * keccak256, although any bytes32 value can be safely used because the final digest will\\n   * be re-hashed.\\n   *\\n   * See {ECDSA-recover}.\\n   */\\n  function toEthSignedMessageHash(bytes32 messageHash) internal pure returns (bytes32 digest) {\\n    assembly ('memory-safe') {\\n      mstore(0x00, '\\\\x19Ethereum Signed Message:\\\\n32') // 32 is the bytes-length of messageHash\\n      mstore(0x1c, messageHash) // 0x1c (28) is the length of the prefix\\n      digest := keccak256(0x00, 0x3c) // 0x3c is the length of the prefix (0x1c) + messageHash (0x20)\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n   * `0x45` (`personal_sign` messages).\\n   *\\n   * The digest is calculated by prefixing an arbitrary `message` with\\n   * `\\\"\\\\x19Ethereum Signed Message:\\\\n\\\" + len(message)` and hashing the result. It corresponds with the\\n   * hash signed when using the https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`] JSON-RPC method.\\n   *\\n   * See {ECDSA-recover}.\\n   */\\n  function toEthSignedMessageHash(bytes memory message) internal pure returns (bytes32) {\\n    return keccak256(bytes.concat('\\\\x19Ethereum Signed Message:\\\\n', bytes(Strings.toString(message.length)), message));\\n  }\\n\\n  /**\\n   * @dev Returns the keccak256 digest of an ERC-191 signed data with version\\n   * `0x00` (data with intended validator).\\n   *\\n   * The digest is calculated by prefixing an arbitrary `data` with `\\\"\\\\x19\\\\x00\\\"` and the intended\\n   * `validator` address. Then hashing the result.\\n   *\\n   * See {ECDSA-recover}.\\n   */\\n  function toDataWithIntendedValidatorHash(address validator, bytes memory data) internal pure returns (bytes32) {\\n    return keccak256(abi.encodePacked(hex'19_00', validator, data));\\n  }\\n\\n  /**\\n   * @dev Returns the keccak256 digest of an EIP-712 typed data (ERC-191 version `0x01`).\\n   *\\n   * The digest is calculated from a `domainSeparator` and a `structHash`, by prefixing them with\\n   * `\\\\x19\\\\x01` and hashing the result. It corresponds to the hash signed by the\\n   * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`] JSON-RPC method as part of EIP-712.\\n   *\\n   * See {ECDSA-recover}.\\n   */\\n  function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32 digest) {\\n    assembly ('memory-safe') {\\n      let ptr := mload(0x40)\\n      mstore(ptr, hex'19_01')\\n      mstore(add(ptr, 0x02), domainSeparator)\\n      mstore(add(ptr, 0x22), structHash)\\n      digest := keccak256(ptr, 0x42)\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x84f8fbb047b3109d322bfe3c241a10dd5657f1b97a12ef8ce90d6aa544a61c91\",\"license\":\"MIT\"},\"contracts/Nonces.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Nonces.sol)\\n\\npragma solidity 0.8.20;\\n\\n/**\\n * @dev Provides tracking nonces for addresses. Nonces will only increment.\\n */\\nabstract contract Nonces {\\n  /**\\n   * @dev The nonce used for an `account` is not the expected current nonce.\\n   */\\n  error InvalidAccountNonce(address account, uint256 currentNonce);\\n\\n  mapping(address => uint256) private _nonces;\\n\\n  /**\\n   * @dev Returns the next unused nonce for an address.\\n   */\\n  function nonces(address owner) public view virtual returns (uint256) {\\n    return _nonces[owner];\\n  }\\n\\n  /**\\n   * @dev Consumes a nonce.\\n   *\\n   * Returns the current value and increments nonce.\\n   */\\n  function _useNonce(address owner) internal virtual returns (uint256) {\\n    // For each account, the nonce has an initial value of 0, can only be incremented by one, and cannot be\\n    // decremented or reset. This guarantees that the nonce never overflows.\\n    unchecked {\\n      // It is important to do x++ and not ++x here.\\n      return _nonces[owner]++;\\n    }\\n  }\\n\\n  /**\\n   * @dev Same as {_useNonce} but checking that `nonce` is the next valid for `owner`.\\n   */\\n  function _useCheckedNonce(address owner, uint256 nonce) internal virtual {\\n    uint256 current = _useNonce(owner);\\n    if (nonce != current) {\\n      revert InvalidAccountNonce(owner, current);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x89af58800b13cebe463b02b2a95f93d9c6b159a07e3531a8576c58ab96be3a8b\",\"license\":\"MIT\"},\"contracts/SafeCast.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SafeCast.sol)\\n// This file was procedurally generated from scripts/generate/templates/SafeCast.js.\\n\\npragma solidity 0.8.20;\\n\\n/**\\n * @dev Wrappers over Solidity's uintXX/intXX/bool casting operators with added overflow\\n * checks.\\n *\\n * Downcasting from uint256/int256 in Solidity does not revert on overflow. This can\\n * easily result in undesired exploitation or bugs, since developers usually\\n * assume that overflows raise errors. `SafeCast` restores this intuition by\\n * reverting the transaction when such an operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeCast {\\n  /**\\n   * @dev Value doesn't fit in an uint of `bits` size.\\n   */\\n  error SafeCastOverflowedUintDowncast(uint8 bits, uint256 value);\\n\\n  /**\\n   * @dev An int value doesn't fit in an uint of `bits` size.\\n   */\\n  error SafeCastOverflowedIntToUint(int256 value);\\n\\n  /**\\n   * @dev Value doesn't fit in an int of `bits` size.\\n   */\\n  error SafeCastOverflowedIntDowncast(uint8 bits, int256 value);\\n\\n  /**\\n   * @dev An uint value doesn't fit in an int of `bits` size.\\n   */\\n  error SafeCastOverflowedUintToInt(uint256 value);\\n\\n  /**\\n   * @dev Returns the downcasted uint248 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint248).\\n   *\\n   * Counterpart to Solidity's `uint248` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 248 bits\\n   */\\n  function toUint248(uint256 value) internal pure returns (uint248) {\\n    if (value > type(uint248).max) {\\n      revert SafeCastOverflowedUintDowncast(248, value);\\n    }\\n    return uint248(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint240 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint240).\\n   *\\n   * Counterpart to Solidity's `uint240` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 240 bits\\n   */\\n  function toUint240(uint256 value) internal pure returns (uint240) {\\n    if (value > type(uint240).max) {\\n      revert SafeCastOverflowedUintDowncast(240, value);\\n    }\\n    return uint240(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint232 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint232).\\n   *\\n   * Counterpart to Solidity's `uint232` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 232 bits\\n   */\\n  function toUint232(uint256 value) internal pure returns (uint232) {\\n    if (value > type(uint232).max) {\\n      revert SafeCastOverflowedUintDowncast(232, value);\\n    }\\n    return uint232(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint224 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint224).\\n   *\\n   * Counterpart to Solidity's `uint224` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toUint224(uint256 value) internal pure returns (uint224) {\\n    if (value > type(uint224).max) {\\n      revert SafeCastOverflowedUintDowncast(224, value);\\n    }\\n    return uint224(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint216 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint216).\\n   *\\n   * Counterpart to Solidity's `uint216` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 216 bits\\n   */\\n  function toUint216(uint256 value) internal pure returns (uint216) {\\n    if (value > type(uint216).max) {\\n      revert SafeCastOverflowedUintDowncast(216, value);\\n    }\\n    return uint216(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint208 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint208).\\n   *\\n   * Counterpart to Solidity's `uint208` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 208 bits\\n   */\\n  function toUint208(uint256 value) internal pure returns (uint208) {\\n    if (value > type(uint208).max) {\\n      revert SafeCastOverflowedUintDowncast(208, value);\\n    }\\n    return uint208(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint200 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint200).\\n   *\\n   * Counterpart to Solidity's `uint200` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 200 bits\\n   */\\n  function toUint200(uint256 value) internal pure returns (uint200) {\\n    if (value > type(uint200).max) {\\n      revert SafeCastOverflowedUintDowncast(200, value);\\n    }\\n    return uint200(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint192 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint192).\\n   *\\n   * Counterpart to Solidity's `uint192` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 192 bits\\n   */\\n  function toUint192(uint256 value) internal pure returns (uint192) {\\n    if (value > type(uint192).max) {\\n      revert SafeCastOverflowedUintDowncast(192, value);\\n    }\\n    return uint192(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint184 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint184).\\n   *\\n   * Counterpart to Solidity's `uint184` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 184 bits\\n   */\\n  function toUint184(uint256 value) internal pure returns (uint184) {\\n    if (value > type(uint184).max) {\\n      revert SafeCastOverflowedUintDowncast(184, value);\\n    }\\n    return uint184(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint176 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint176).\\n   *\\n   * Counterpart to Solidity's `uint176` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 176 bits\\n   */\\n  function toUint176(uint256 value) internal pure returns (uint176) {\\n    if (value > type(uint176).max) {\\n      revert SafeCastOverflowedUintDowncast(176, value);\\n    }\\n    return uint176(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint168 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint168).\\n   *\\n   * Counterpart to Solidity's `uint168` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 168 bits\\n   */\\n  function toUint168(uint256 value) internal pure returns (uint168) {\\n    if (value > type(uint168).max) {\\n      revert SafeCastOverflowedUintDowncast(168, value);\\n    }\\n    return uint168(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint160 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint160).\\n   *\\n   * Counterpart to Solidity's `uint160` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 160 bits\\n   */\\n  function toUint160(uint256 value) internal pure returns (uint160) {\\n    if (value > type(uint160).max) {\\n      revert SafeCastOverflowedUintDowncast(160, value);\\n    }\\n    return uint160(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint152 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint152).\\n   *\\n   * Counterpart to Solidity's `uint152` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 152 bits\\n   */\\n  function toUint152(uint256 value) internal pure returns (uint152) {\\n    if (value > type(uint152).max) {\\n      revert SafeCastOverflowedUintDowncast(152, value);\\n    }\\n    return uint152(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint144 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint144).\\n   *\\n   * Counterpart to Solidity's `uint144` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 144 bits\\n   */\\n  function toUint144(uint256 value) internal pure returns (uint144) {\\n    if (value > type(uint144).max) {\\n      revert SafeCastOverflowedUintDowncast(144, value);\\n    }\\n    return uint144(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint136 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint136).\\n   *\\n   * Counterpart to Solidity's `uint136` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 136 bits\\n   */\\n  function toUint136(uint256 value) internal pure returns (uint136) {\\n    if (value > type(uint136).max) {\\n      revert SafeCastOverflowedUintDowncast(136, value);\\n    }\\n    return uint136(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint128 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint128).\\n   *\\n   * Counterpart to Solidity's `uint128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   */\\n  function toUint128(uint256 value) internal pure returns (uint128) {\\n    if (value > type(uint128).max) {\\n      revert SafeCastOverflowedUintDowncast(128, value);\\n    }\\n    return uint128(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint120 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint120).\\n   *\\n   * Counterpart to Solidity's `uint120` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 120 bits\\n   */\\n  function toUint120(uint256 value) internal pure returns (uint120) {\\n    if (value > type(uint120).max) {\\n      revert SafeCastOverflowedUintDowncast(120, value);\\n    }\\n    return uint120(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint112 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint112).\\n   *\\n   * Counterpart to Solidity's `uint112` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 112 bits\\n   */\\n  function toUint112(uint256 value) internal pure returns (uint112) {\\n    if (value > type(uint112).max) {\\n      revert SafeCastOverflowedUintDowncast(112, value);\\n    }\\n    return uint112(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint104 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint104).\\n   *\\n   * Counterpart to Solidity's `uint104` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 104 bits\\n   */\\n  function toUint104(uint256 value) internal pure returns (uint104) {\\n    if (value > type(uint104).max) {\\n      revert SafeCastOverflowedUintDowncast(104, value);\\n    }\\n    return uint104(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint96 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint96).\\n   *\\n   * Counterpart to Solidity's `uint96` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 96 bits\\n   */\\n  function toUint96(uint256 value) internal pure returns (uint96) {\\n    if (value > type(uint96).max) {\\n      revert SafeCastOverflowedUintDowncast(96, value);\\n    }\\n    return uint96(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint88 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint88).\\n   *\\n   * Counterpart to Solidity's `uint88` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 88 bits\\n   */\\n  function toUint88(uint256 value) internal pure returns (uint88) {\\n    if (value > type(uint88).max) {\\n      revert SafeCastOverflowedUintDowncast(88, value);\\n    }\\n    return uint88(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint80 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint80).\\n   *\\n   * Counterpart to Solidity's `uint80` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 80 bits\\n   */\\n  function toUint80(uint256 value) internal pure returns (uint80) {\\n    if (value > type(uint80).max) {\\n      revert SafeCastOverflowedUintDowncast(80, value);\\n    }\\n    return uint80(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint72 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint72).\\n   *\\n   * Counterpart to Solidity's `uint72` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 72 bits\\n   */\\n  function toUint72(uint256 value) internal pure returns (uint72) {\\n    if (value > type(uint72).max) {\\n      revert SafeCastOverflowedUintDowncast(72, value);\\n    }\\n    return uint72(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint64 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint64).\\n   *\\n   * Counterpart to Solidity's `uint64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   */\\n  function toUint64(uint256 value) internal pure returns (uint64) {\\n    if (value > type(uint64).max) {\\n      revert SafeCastOverflowedUintDowncast(64, value);\\n    }\\n    return uint64(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint56 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint56).\\n   *\\n   * Counterpart to Solidity's `uint56` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 56 bits\\n   */\\n  function toUint56(uint256 value) internal pure returns (uint56) {\\n    if (value > type(uint56).max) {\\n      revert SafeCastOverflowedUintDowncast(56, value);\\n    }\\n    return uint56(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint48 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint48).\\n   *\\n   * Counterpart to Solidity's `uint48` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 48 bits\\n   */\\n  function toUint48(uint256 value) internal pure returns (uint48) {\\n    if (value > type(uint48).max) {\\n      revert SafeCastOverflowedUintDowncast(48, value);\\n    }\\n    return uint48(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint40 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint40).\\n   *\\n   * Counterpart to Solidity's `uint40` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 40 bits\\n   */\\n  function toUint40(uint256 value) internal pure returns (uint40) {\\n    if (value > type(uint40).max) {\\n      revert SafeCastOverflowedUintDowncast(40, value);\\n    }\\n    return uint40(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint32 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint32).\\n   *\\n   * Counterpart to Solidity's `uint32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   */\\n  function toUint32(uint256 value) internal pure returns (uint32) {\\n    if (value > type(uint32).max) {\\n      revert SafeCastOverflowedUintDowncast(32, value);\\n    }\\n    return uint32(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint24 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint24).\\n   *\\n   * Counterpart to Solidity's `uint24` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 24 bits\\n   */\\n  function toUint24(uint256 value) internal pure returns (uint24) {\\n    if (value > type(uint24).max) {\\n      revert SafeCastOverflowedUintDowncast(24, value);\\n    }\\n    return uint24(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint16 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint16).\\n   *\\n   * Counterpart to Solidity's `uint16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   */\\n  function toUint16(uint256 value) internal pure returns (uint16) {\\n    if (value > type(uint16).max) {\\n      revert SafeCastOverflowedUintDowncast(16, value);\\n    }\\n    return uint16(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted uint8 from uint256, reverting on\\n   * overflow (when the input is greater than largest uint8).\\n   *\\n   * Counterpart to Solidity's `uint8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits\\n   */\\n  function toUint8(uint256 value) internal pure returns (uint8) {\\n    if (value > type(uint8).max) {\\n      revert SafeCastOverflowedUintDowncast(8, value);\\n    }\\n    return uint8(value);\\n  }\\n\\n  /**\\n   * @dev Converts a signed int256 into an unsigned uint256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be greater than or equal to 0.\\n   */\\n  function toUint256(int256 value) internal pure returns (uint256) {\\n    if (value < 0) {\\n      revert SafeCastOverflowedIntToUint(value);\\n    }\\n    return uint256(value);\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int248 from int256, reverting on\\n   * overflow (when the input is less than smallest int248 or\\n   * greater than largest int248).\\n   *\\n   * Counterpart to Solidity's `int248` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 248 bits\\n   */\\n  function toInt248(int256 value) internal pure returns (int248 downcasted) {\\n    downcasted = int248(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(248, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int240 from int256, reverting on\\n   * overflow (when the input is less than smallest int240 or\\n   * greater than largest int240).\\n   *\\n   * Counterpart to Solidity's `int240` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 240 bits\\n   */\\n  function toInt240(int256 value) internal pure returns (int240 downcasted) {\\n    downcasted = int240(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(240, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int232 from int256, reverting on\\n   * overflow (when the input is less than smallest int232 or\\n   * greater than largest int232).\\n   *\\n   * Counterpart to Solidity's `int232` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 232 bits\\n   */\\n  function toInt232(int256 value) internal pure returns (int232 downcasted) {\\n    downcasted = int232(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(232, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int224 from int256, reverting on\\n   * overflow (when the input is less than smallest int224 or\\n   * greater than largest int224).\\n   *\\n   * Counterpart to Solidity's `int224` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 224 bits\\n   */\\n  function toInt224(int256 value) internal pure returns (int224 downcasted) {\\n    downcasted = int224(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(224, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int216 from int256, reverting on\\n   * overflow (when the input is less than smallest int216 or\\n   * greater than largest int216).\\n   *\\n   * Counterpart to Solidity's `int216` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 216 bits\\n   */\\n  function toInt216(int256 value) internal pure returns (int216 downcasted) {\\n    downcasted = int216(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(216, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int208 from int256, reverting on\\n   * overflow (when the input is less than smallest int208 or\\n   * greater than largest int208).\\n   *\\n   * Counterpart to Solidity's `int208` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 208 bits\\n   */\\n  function toInt208(int256 value) internal pure returns (int208 downcasted) {\\n    downcasted = int208(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(208, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int200 from int256, reverting on\\n   * overflow (when the input is less than smallest int200 or\\n   * greater than largest int200).\\n   *\\n   * Counterpart to Solidity's `int200` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 200 bits\\n   */\\n  function toInt200(int256 value) internal pure returns (int200 downcasted) {\\n    downcasted = int200(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(200, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int192 from int256, reverting on\\n   * overflow (when the input is less than smallest int192 or\\n   * greater than largest int192).\\n   *\\n   * Counterpart to Solidity's `int192` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 192 bits\\n   */\\n  function toInt192(int256 value) internal pure returns (int192 downcasted) {\\n    downcasted = int192(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(192, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int184 from int256, reverting on\\n   * overflow (when the input is less than smallest int184 or\\n   * greater than largest int184).\\n   *\\n   * Counterpart to Solidity's `int184` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 184 bits\\n   */\\n  function toInt184(int256 value) internal pure returns (int184 downcasted) {\\n    downcasted = int184(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(184, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int176 from int256, reverting on\\n   * overflow (when the input is less than smallest int176 or\\n   * greater than largest int176).\\n   *\\n   * Counterpart to Solidity's `int176` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 176 bits\\n   */\\n  function toInt176(int256 value) internal pure returns (int176 downcasted) {\\n    downcasted = int176(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(176, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int168 from int256, reverting on\\n   * overflow (when the input is less than smallest int168 or\\n   * greater than largest int168).\\n   *\\n   * Counterpart to Solidity's `int168` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 168 bits\\n   */\\n  function toInt168(int256 value) internal pure returns (int168 downcasted) {\\n    downcasted = int168(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(168, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int160 from int256, reverting on\\n   * overflow (when the input is less than smallest int160 or\\n   * greater than largest int160).\\n   *\\n   * Counterpart to Solidity's `int160` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 160 bits\\n   */\\n  function toInt160(int256 value) internal pure returns (int160 downcasted) {\\n    downcasted = int160(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(160, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int152 from int256, reverting on\\n   * overflow (when the input is less than smallest int152 or\\n   * greater than largest int152).\\n   *\\n   * Counterpart to Solidity's `int152` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 152 bits\\n   */\\n  function toInt152(int256 value) internal pure returns (int152 downcasted) {\\n    downcasted = int152(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(152, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int144 from int256, reverting on\\n   * overflow (when the input is less than smallest int144 or\\n   * greater than largest int144).\\n   *\\n   * Counterpart to Solidity's `int144` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 144 bits\\n   */\\n  function toInt144(int256 value) internal pure returns (int144 downcasted) {\\n    downcasted = int144(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(144, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int136 from int256, reverting on\\n   * overflow (when the input is less than smallest int136 or\\n   * greater than largest int136).\\n   *\\n   * Counterpart to Solidity's `int136` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 136 bits\\n   */\\n  function toInt136(int256 value) internal pure returns (int136 downcasted) {\\n    downcasted = int136(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(136, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int128 from int256, reverting on\\n   * overflow (when the input is less than smallest int128 or\\n   * greater than largest int128).\\n   *\\n   * Counterpart to Solidity's `int128` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 128 bits\\n   */\\n  function toInt128(int256 value) internal pure returns (int128 downcasted) {\\n    downcasted = int128(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(128, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int120 from int256, reverting on\\n   * overflow (when the input is less than smallest int120 or\\n   * greater than largest int120).\\n   *\\n   * Counterpart to Solidity's `int120` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 120 bits\\n   */\\n  function toInt120(int256 value) internal pure returns (int120 downcasted) {\\n    downcasted = int120(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(120, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int112 from int256, reverting on\\n   * overflow (when the input is less than smallest int112 or\\n   * greater than largest int112).\\n   *\\n   * Counterpart to Solidity's `int112` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 112 bits\\n   */\\n  function toInt112(int256 value) internal pure returns (int112 downcasted) {\\n    downcasted = int112(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(112, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int104 from int256, reverting on\\n   * overflow (when the input is less than smallest int104 or\\n   * greater than largest int104).\\n   *\\n   * Counterpart to Solidity's `int104` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 104 bits\\n   */\\n  function toInt104(int256 value) internal pure returns (int104 downcasted) {\\n    downcasted = int104(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(104, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int96 from int256, reverting on\\n   * overflow (when the input is less than smallest int96 or\\n   * greater than largest int96).\\n   *\\n   * Counterpart to Solidity's `int96` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 96 bits\\n   */\\n  function toInt96(int256 value) internal pure returns (int96 downcasted) {\\n    downcasted = int96(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(96, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int88 from int256, reverting on\\n   * overflow (when the input is less than smallest int88 or\\n   * greater than largest int88).\\n   *\\n   * Counterpart to Solidity's `int88` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 88 bits\\n   */\\n  function toInt88(int256 value) internal pure returns (int88 downcasted) {\\n    downcasted = int88(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(88, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int80 from int256, reverting on\\n   * overflow (when the input is less than smallest int80 or\\n   * greater than largest int80).\\n   *\\n   * Counterpart to Solidity's `int80` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 80 bits\\n   */\\n  function toInt80(int256 value) internal pure returns (int80 downcasted) {\\n    downcasted = int80(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(80, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int72 from int256, reverting on\\n   * overflow (when the input is less than smallest int72 or\\n   * greater than largest int72).\\n   *\\n   * Counterpart to Solidity's `int72` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 72 bits\\n   */\\n  function toInt72(int256 value) internal pure returns (int72 downcasted) {\\n    downcasted = int72(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(72, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int64 from int256, reverting on\\n   * overflow (when the input is less than smallest int64 or\\n   * greater than largest int64).\\n   *\\n   * Counterpart to Solidity's `int64` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 64 bits\\n   */\\n  function toInt64(int256 value) internal pure returns (int64 downcasted) {\\n    downcasted = int64(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(64, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int56 from int256, reverting on\\n   * overflow (when the input is less than smallest int56 or\\n   * greater than largest int56).\\n   *\\n   * Counterpart to Solidity's `int56` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 56 bits\\n   */\\n  function toInt56(int256 value) internal pure returns (int56 downcasted) {\\n    downcasted = int56(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(56, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int48 from int256, reverting on\\n   * overflow (when the input is less than smallest int48 or\\n   * greater than largest int48).\\n   *\\n   * Counterpart to Solidity's `int48` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 48 bits\\n   */\\n  function toInt48(int256 value) internal pure returns (int48 downcasted) {\\n    downcasted = int48(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(48, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int40 from int256, reverting on\\n   * overflow (when the input is less than smallest int40 or\\n   * greater than largest int40).\\n   *\\n   * Counterpart to Solidity's `int40` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 40 bits\\n   */\\n  function toInt40(int256 value) internal pure returns (int40 downcasted) {\\n    downcasted = int40(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(40, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int32 from int256, reverting on\\n   * overflow (when the input is less than smallest int32 or\\n   * greater than largest int32).\\n   *\\n   * Counterpart to Solidity's `int32` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 32 bits\\n   */\\n  function toInt32(int256 value) internal pure returns (int32 downcasted) {\\n    downcasted = int32(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(32, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int24 from int256, reverting on\\n   * overflow (when the input is less than smallest int24 or\\n   * greater than largest int24).\\n   *\\n   * Counterpart to Solidity's `int24` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 24 bits\\n   */\\n  function toInt24(int256 value) internal pure returns (int24 downcasted) {\\n    downcasted = int24(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(24, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int16 from int256, reverting on\\n   * overflow (when the input is less than smallest int16 or\\n   * greater than largest int16).\\n   *\\n   * Counterpart to Solidity's `int16` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 16 bits\\n   */\\n  function toInt16(int256 value) internal pure returns (int16 downcasted) {\\n    downcasted = int16(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(16, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the downcasted int8 from int256, reverting on\\n   * overflow (when the input is less than smallest int8 or\\n   * greater than largest int8).\\n   *\\n   * Counterpart to Solidity's `int8` operator.\\n   *\\n   * Requirements:\\n   *\\n   * - input must fit into 8 bits\\n   */\\n  function toInt8(int256 value) internal pure returns (int8 downcasted) {\\n    downcasted = int8(value);\\n    if (downcasted != value) {\\n      revert SafeCastOverflowedIntDowncast(8, value);\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts an unsigned uint256 into a signed int256.\\n   *\\n   * Requirements:\\n   *\\n   * - input must be less than or equal to maxInt256.\\n   */\\n  function toInt256(uint256 value) internal pure returns (int256) {\\n    // Note: Unsafe cast below is okay because `type(int256).max` is guaranteed to be positive\\n    if (value > uint256(type(int256).max)) {\\n      revert SafeCastOverflowedUintToInt(value);\\n    }\\n    return int256(value);\\n  }\\n\\n  /**\\n   * @dev Cast a boolean (false or true) to a uint256 (0 or 1) with no jump.\\n   */\\n  function toUint(bool b) internal pure returns (uint256 u) {\\n    assembly ('memory-safe') {\\n      u := iszero(iszero(b))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x32c103a36c43b8603055ca1c48531e4ce916292c6e1a3c55dd0be550c82c304a\",\"license\":\"MIT\"},\"contracts/ShortStrings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/ShortStrings.sol)\\n\\npragma solidity 0.8.20;\\n\\nimport { StorageSlot } from './StorageSlot.sol';\\n\\n// | string  | 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA   |\\n// | length  | 0x                                                              BB |\\ntype ShortString is bytes32;\\n\\n/**\\n * @dev This library provides functions to convert short memory strings\\n * into a `ShortString` type that can be used as an immutable variable.\\n *\\n * Strings of arbitrary length can be optimized using this library if\\n * they are short enough (up to 31 bytes) by packing them with their\\n * length (1 byte) in a single EVM word (32 bytes). Additionally, a\\n * fallback mechanism can be used for every other case.\\n *\\n * Usage example:\\n *\\n * ```solidity\\n * contract Named {\\n *     using ShortStrings for *;\\n *\\n *     ShortString private immutable _name;\\n *     string private _nameFallback;\\n *\\n *     constructor(string memory contractName) {\\n *         _name = contractName.toShortStringWithFallback(_nameFallback);\\n *     }\\n *\\n *     function name() external view returns (string memory) {\\n *         return _name.toStringWithFallback(_nameFallback);\\n *     }\\n * }\\n * ```\\n */\\nlibrary ShortStrings {\\n  // Used as an identifier for strings longer than 31 bytes.\\n  bytes32 private constant FALLBACK_SENTINEL = 0x00000000000000000000000000000000000000000000000000000000000000FF;\\n\\n  error StringTooLong(string str);\\n  error InvalidShortString();\\n\\n  /**\\n   * @dev Encode a string of at most 31 chars into a `ShortString`.\\n   *\\n   * This will trigger a `StringTooLong` error is the input string is too long.\\n   */\\n  function toShortString(string memory str) internal pure returns (ShortString) {\\n    bytes memory bstr = bytes(str);\\n    if (bstr.length > 31) {\\n      revert StringTooLong(str);\\n    }\\n    return ShortString.wrap(bytes32(uint256(bytes32(bstr)) | bstr.length));\\n  }\\n\\n  /**\\n   * @dev Decode a `ShortString` back to a \\\"normal\\\" string.\\n   */\\n  function toString(ShortString sstr) internal pure returns (string memory) {\\n    uint256 len = byteLength(sstr);\\n    // using `new string(len)` would work locally but is not memory safe.\\n    string memory str = new string(32);\\n    assembly ('memory-safe') {\\n      mstore(str, len)\\n      mstore(add(str, 0x20), sstr)\\n    }\\n    return str;\\n  }\\n\\n  /**\\n   * @dev Return the length of a `ShortString`.\\n   */\\n  function byteLength(ShortString sstr) internal pure returns (uint256) {\\n    uint256 result = uint256(ShortString.unwrap(sstr)) & 0xFF;\\n    if (result > 31) {\\n      revert InvalidShortString();\\n    }\\n    return result;\\n  }\\n\\n  /**\\n   * @dev Encode a string into a `ShortString`, or write it to storage if it is too long.\\n   */\\n  function toShortStringWithFallback(string memory value, string storage store) internal returns (ShortString) {\\n    if (bytes(value).length < 32) {\\n      return toShortString(value);\\n    } else {\\n      StorageSlot.getStringSlot(store).value = value;\\n      return ShortString.wrap(FALLBACK_SENTINEL);\\n    }\\n  }\\n\\n  /**\\n   * @dev Decode a string that was encoded to `ShortString` or written to storage using {setWithFallback}.\\n   */\\n  function toStringWithFallback(ShortString value, string storage store) internal pure returns (string memory) {\\n    if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n      return toString(value);\\n    } else {\\n      return store;\\n    }\\n  }\\n\\n  /**\\n   * @dev Return the length of a string that was encoded to `ShortString` or written to storage using\\n   * {setWithFallback}.\\n   *\\n   * WARNING: This will return the \\\"byte length\\\" of the string. This may not reflect the actual length in terms of\\n   * actual characters as the UTF-8 encoding of a single character can span over multiple bytes.\\n   */\\n  function byteLengthWithFallback(ShortString value, string storage store) internal view returns (uint256) {\\n    if (ShortString.unwrap(value) != FALLBACK_SENTINEL) {\\n      return byteLength(value);\\n    } else {\\n      return bytes(store).length;\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7963e28a4d4f5a3a8dc14545972c63031211673c94b05e7dd029ebc398167f24\",\"license\":\"MIT\"},\"contracts/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/math/SignedMath.sol)\\n\\npragma solidity 0.8.20;\\n\\nimport { SafeCast } from './SafeCast.sol';\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n  /**\\n   * @dev Branchless ternary evaluation for `a ? b : c`. Gas costs are constant.\\n   *\\n   * IMPORTANT: This function may reduce bytecode size and consume less gas when used standalone.\\n   * However, the compiler may optimize Solidity ternary operations (i.e. `a ? b : c`) to only compute\\n   * one branch when needed, making this function more expensive.\\n   */\\n  function ternary(bool condition, int256 a, int256 b) internal pure returns (int256) {\\n    unchecked {\\n      // branchless ternary works because:\\n      // b ^ (a ^ b) == a\\n      // b ^ 0 == b\\n      return b ^ ((a ^ b) * int256(SafeCast.toUint(condition)));\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns the largest of two signed numbers.\\n   */\\n  function max(int256 a, int256 b) internal pure returns (int256) {\\n    return ternary(a > b, a, b);\\n  }\\n\\n  /**\\n   * @dev Returns the smallest of two signed numbers.\\n   */\\n  function min(int256 a, int256 b) internal pure returns (int256) {\\n    return ternary(a < b, a, b);\\n  }\\n\\n  /**\\n   * @dev Returns the average of two signed numbers without overflow.\\n   * The result is rounded towards zero.\\n   */\\n  function average(int256 a, int256 b) internal pure returns (int256) {\\n    // Formula from the book \\\"Hacker's Delight\\\"\\n    int256 x = (a & b) + ((a ^ b) >> 1);\\n    return x + (int256(uint256(x) >> 255) & (a ^ b));\\n  }\\n\\n  /**\\n   * @dev Returns the absolute unsigned value of a signed value.\\n   */\\n  function abs(int256 n) internal pure returns (uint256) {\\n    unchecked {\\n      // Formula from the \\\"Bit Twiddling Hacks\\\" by Sean Eron Anderson.\\n      // Since `n` is a signed integer, the generated bytecode will use the SAR opcode to perform the right shift,\\n      // taking advantage of the most significant (or \\\"sign\\\" bit) in two's complement representation.\\n      // This opcode adds new most significant bits set to the value of the previous most significant bit. As a result,\\n      // the mask will either be `bytes32(0)` (if n is positive) or `~bytes32(0)` (if n is negative).\\n      int256 mask = n >> 255;\\n\\n      // A `bytes32(0)` mask leaves the input unchanged, while a `~bytes32(0)` mask complements it.\\n      return uint256((n + mask) ^ mask);\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x7107f2df29e03a9807e519d95601f7607b823f4b2de9d20c336faae25d564087\",\"license\":\"MIT\"},\"contracts/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/StorageSlot.sol)\\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\\n\\npragma solidity 0.8.20;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC-1967 implementation slot:\\n * ```solidity\\n * contract ERC1967 {\\n *     // Define the slot. Alternatively, use the SlotDerivation library to derive the slot.\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(newImplementation.code.length > 0);\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * TIP: Consider using this library along with {SlotDerivation}.\\n */\\nlibrary StorageSlot {\\n  struct AddressSlot {\\n    address value;\\n  }\\n\\n  struct BooleanSlot {\\n    bool value;\\n  }\\n\\n  struct Bytes32Slot {\\n    bytes32 value;\\n  }\\n\\n  struct Uint256Slot {\\n    uint256 value;\\n  }\\n\\n  struct Int256Slot {\\n    int256 value;\\n  }\\n\\n  struct StringSlot {\\n    string value;\\n  }\\n\\n  struct BytesSlot {\\n    bytes value;\\n  }\\n\\n  /**\\n   * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n   */\\n  function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n    assembly ('memory-safe') {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns a `BooleanSlot` with member `value` located at `slot`.\\n   */\\n  function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n    assembly ('memory-safe') {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns a `Bytes32Slot` with member `value` located at `slot`.\\n   */\\n  function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n    assembly ('memory-safe') {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns a `Uint256Slot` with member `value` located at `slot`.\\n   */\\n  function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n    assembly ('memory-safe') {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns a `Int256Slot` with member `value` located at `slot`.\\n   */\\n  function getInt256Slot(bytes32 slot) internal pure returns (Int256Slot storage r) {\\n    assembly ('memory-safe') {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns a `StringSlot` with member `value` located at `slot`.\\n   */\\n  function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\\n    assembly ('memory-safe') {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\\n   */\\n  function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\\n    assembly ('memory-safe') {\\n      r.slot := store.slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns a `BytesSlot` with member `value` located at `slot`.\\n   */\\n  function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\\n    assembly ('memory-safe') {\\n      r.slot := slot\\n    }\\n  }\\n\\n  /**\\n   * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\\n   */\\n  function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\\n    assembly ('memory-safe') {\\n      r.slot := store.slot\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0x371dce18a5efae4b56294538238803481526a326e3f1df7ea0ea52fda7a9de36\",\"license\":\"MIT\"},\"contracts/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.1.0) (utils/Strings.sol)\\n\\npragma solidity 0.8.20;\\n\\nimport { Math } from './Math.sol';\\nimport { SafeCast } from './SafeCast.sol';\\nimport { SignedMath } from './SignedMath.sol';\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n  using SafeCast for *;\\n\\n  bytes16 private constant HEX_DIGITS = '0123456789abcdef';\\n  uint8 private constant ADDRESS_LENGTH = 20;\\n\\n  /**\\n   * @dev The `value` string doesn't fit in the specified `length`.\\n   */\\n  error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n  /**\\n   * @dev The string being parsed contains characters that are not in scope of the given base.\\n   */\\n  error StringsInvalidChar();\\n\\n  /**\\n   * @dev The string being parsed is not a properly formatted address.\\n   */\\n  error StringsInvalidAddressFormat();\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n   */\\n  function toString(uint256 value) internal pure returns (string memory) {\\n    unchecked {\\n      uint256 length = Math.log10(value) + 1;\\n      string memory buffer = new string(length);\\n      uint256 ptr;\\n      assembly ('memory-safe') {\\n        ptr := add(buffer, add(32, length))\\n      }\\n      while (true) {\\n        ptr--;\\n        assembly ('memory-safe') {\\n          mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n        }\\n        value /= 10;\\n        if (value == 0) break;\\n      }\\n      return buffer;\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n   */\\n  function toStringSigned(int256 value) internal pure returns (string memory) {\\n    return string.concat(value < 0 ? '-' : '', toString(SignedMath.abs(value)));\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n   */\\n  function toHexString(uint256 value) internal pure returns (string memory) {\\n    unchecked {\\n      return toHexString(value, Math.log256(value) + 1);\\n    }\\n  }\\n\\n  /**\\n   * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n   */\\n  function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n    uint256 localValue = value;\\n    bytes memory buffer = new bytes(2 * length + 2);\\n    buffer[0] = '0';\\n    buffer[1] = 'x';\\n    for (uint256 i = 2 * length + 1; i > 1; --i) {\\n      buffer[i] = HEX_DIGITS[localValue & 0xf];\\n      localValue >>= 4;\\n    }\\n    if (localValue != 0) {\\n      revert StringsInsufficientHexLength(value, length);\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n   * representation.\\n   */\\n  function toHexString(address addr) internal pure returns (string memory) {\\n    return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n  }\\n\\n  /**\\n   * @dev Converts an `address` with fixed length of 20 bytes to its checksummed ASCII `string` hexadecimal\\n   * representation, according to EIP-55.\\n   */\\n  function toChecksumHexString(address addr) internal pure returns (string memory) {\\n    bytes memory buffer = bytes(toHexString(addr));\\n\\n    // hash the hex part of buffer (skip length + 2 bytes, length 40)\\n    uint256 hashValue;\\n    assembly ('memory-safe') {\\n      hashValue := shr(96, keccak256(add(buffer, 0x22), 40))\\n    }\\n\\n    for (uint256 i = 41; i > 1; --i) {\\n      // possible values for buffer[i] are 48 (0) to 57 (9) and 97 (a) to 102 (f)\\n      if (hashValue & 0xf > 7 && uint8(buffer[i]) > 96) {\\n        // case shift by xoring with 0x20\\n        buffer[i] ^= 0x20;\\n      }\\n      hashValue >>= 4;\\n    }\\n    return string(buffer);\\n  }\\n\\n  /**\\n   * @dev Returns true if the two strings are equal.\\n   */\\n  function equal(string memory a, string memory b) internal pure returns (bool) {\\n    return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n  }\\n\\n  /**\\n   * @dev Parse a decimal string and returns the value as a `uint256`.\\n   *\\n   * Requirements:\\n   * - The string must be formatted as `[0-9]*`\\n   * - The result must fit into an `uint256` type\\n   */\\n  function parseUint(string memory input) internal pure returns (uint256) {\\n    return parseUint(input, 0, bytes(input).length);\\n  }\\n\\n  /**\\n   * @dev Variant of {parseUint} that parses a substring of `input` located between position `begin` (included) and\\n   * `end` (excluded).\\n   *\\n   * Requirements:\\n   * - The substring must be formatted as `[0-9]*`\\n   * - The result must fit into an `uint256` type\\n   */\\n  function parseUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n    (bool success, uint256 value) = tryParseUint(input, begin, end);\\n    if (!success) revert StringsInvalidChar();\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Variant of {parseUint-string} that returns false if the parsing fails because of an invalid character.\\n   *\\n   * NOTE: This function will revert if the result does not fit in a `uint256`.\\n   */\\n  function tryParseUint(string memory input) internal pure returns (bool success, uint256 value) {\\n    return _tryParseUintUncheckedBounds(input, 0, bytes(input).length);\\n  }\\n\\n  /**\\n   * @dev Variant of {parseUint-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n   * character.\\n   *\\n   * NOTE: This function will revert if the result does not fit in a `uint256`.\\n   */\\n  function tryParseUint(string memory input, uint256 begin, uint256 end) internal pure returns (bool success, uint256 value) {\\n    if (end > bytes(input).length || begin > end) return (false, 0);\\n    return _tryParseUintUncheckedBounds(input, begin, end);\\n  }\\n\\n  /**\\n   * @dev Variant of {tryParseUint} that does not check bounds and returns (true, 0) if they are invalid.\\n   */\\n  function _tryParseUintUncheckedBounds(\\n    string memory input,\\n    uint256 begin,\\n    uint256 end\\n  ) private pure returns (bool success, uint256 value) {\\n    bytes memory buffer = bytes(input);\\n\\n    uint256 result = 0;\\n    for (uint256 i = begin; i < end; ++i) {\\n      uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n      if (chr > 9) return (false, 0);\\n      result *= 10;\\n      result += chr;\\n    }\\n    return (true, result);\\n  }\\n\\n  /**\\n   * @dev Parse a decimal string and returns the value as a `int256`.\\n   *\\n   * Requirements:\\n   * - The string must be formatted as `[-+]?[0-9]*`\\n   * - The result must fit in an `int256` type.\\n   */\\n  function parseInt(string memory input) internal pure returns (int256) {\\n    return parseInt(input, 0, bytes(input).length);\\n  }\\n\\n  /**\\n   * @dev Variant of {parseInt-string} that parses a substring of `input` located between position `begin` (included) and\\n   * `end` (excluded).\\n   *\\n   * Requirements:\\n   * - The substring must be formatted as `[-+]?[0-9]*`\\n   * - The result must fit in an `int256` type.\\n   */\\n  function parseInt(string memory input, uint256 begin, uint256 end) internal pure returns (int256) {\\n    (bool success, int256 value) = tryParseInt(input, begin, end);\\n    if (!success) revert StringsInvalidChar();\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Variant of {parseInt-string} that returns false if the parsing fails because of an invalid character or if\\n   * the result does not fit in a `int256`.\\n   *\\n   * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n   */\\n  function tryParseInt(string memory input) internal pure returns (bool success, int256 value) {\\n    return _tryParseIntUncheckedBounds(input, 0, bytes(input).length);\\n  }\\n\\n  uint256 private constant ABS_MIN_INT256 = 2 ** 255;\\n\\n  /**\\n   * @dev Variant of {parseInt-string-uint256-uint256} that returns false if the parsing fails because of an invalid\\n   * character or if the result does not fit in a `int256`.\\n   *\\n   * NOTE: This function will revert if the absolute value of the result does not fit in a `uint256`.\\n   */\\n  function tryParseInt(string memory input, uint256 begin, uint256 end) internal pure returns (bool success, int256 value) {\\n    if (end > bytes(input).length || begin > end) return (false, 0);\\n    return _tryParseIntUncheckedBounds(input, begin, end);\\n  }\\n\\n  /**\\n   * @dev Variant of {tryParseInt} that does not check bounds and returns (true, 0) if they are invalid.\\n   */\\n  function _tryParseIntUncheckedBounds(string memory input, uint256 begin, uint256 end) private pure returns (bool success, int256 value) {\\n    bytes memory buffer = bytes(input);\\n\\n    // Check presence of a negative sign.\\n    bytes1 sign = begin == end ? bytes1(0) : bytes1(_unsafeReadBytesOffset(buffer, begin)); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n    bool positiveSign = sign == bytes1('+');\\n    bool negativeSign = sign == bytes1('-');\\n    uint256 offset = (positiveSign || negativeSign).toUint();\\n\\n    (bool absSuccess, uint256 absValue) = tryParseUint(input, begin + offset, end);\\n\\n    if (absSuccess && absValue < ABS_MIN_INT256) {\\n      return (true, negativeSign ? -int256(absValue) : int256(absValue));\\n    } else if (absSuccess && negativeSign && absValue == ABS_MIN_INT256) {\\n      return (true, type(int256).min);\\n    } else return (false, 0);\\n  }\\n\\n  /**\\n   * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as a `uint256`.\\n   *\\n   * Requirements:\\n   * - The string must be formatted as `(0x)?[0-9a-fA-F]*`\\n   * - The result must fit in an `uint256` type.\\n   */\\n  function parseHexUint(string memory input) internal pure returns (uint256) {\\n    return parseHexUint(input, 0, bytes(input).length);\\n  }\\n\\n  /**\\n   * @dev Variant of {parseHexUint} that parses a substring of `input` located between position `begin` (included) and\\n   * `end` (excluded).\\n   *\\n   * Requirements:\\n   * - The substring must be formatted as `(0x)?[0-9a-fA-F]*`\\n   * - The result must fit in an `uint256` type.\\n   */\\n  function parseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (uint256) {\\n    (bool success, uint256 value) = tryParseHexUint(input, begin, end);\\n    if (!success) revert StringsInvalidChar();\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Variant of {parseHexUint-string} that returns false if the parsing fails because of an invalid character.\\n   *\\n   * NOTE: This function will revert if the result does not fit in a `uint256`.\\n   */\\n  function tryParseHexUint(string memory input) internal pure returns (bool success, uint256 value) {\\n    return _tryParseHexUintUncheckedBounds(input, 0, bytes(input).length);\\n  }\\n\\n  /**\\n   * @dev Variant of {parseHexUint-string-uint256-uint256} that returns false if the parsing fails because of an\\n   * invalid character.\\n   *\\n   * NOTE: This function will revert if the result does not fit in a `uint256`.\\n   */\\n  function tryParseHexUint(string memory input, uint256 begin, uint256 end) internal pure returns (bool success, uint256 value) {\\n    if (end > bytes(input).length || begin > end) return (false, 0);\\n    return _tryParseHexUintUncheckedBounds(input, begin, end);\\n  }\\n\\n  /**\\n   * @dev Variant of {tryParseHexUint} that does not check bounds and returns (true, 0) if they are invalid.\\n   */\\n  function _tryParseHexUintUncheckedBounds(\\n    string memory input,\\n    uint256 begin,\\n    uint256 end\\n  ) private pure returns (bool success, uint256 value) {\\n    bytes memory buffer = bytes(input);\\n\\n    // skip 0x prefix if present\\n    bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(buffer, begin)) == bytes2('0x'); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n    uint256 offset = hasPrefix.toUint() * 2;\\n\\n    uint256 result = 0;\\n    for (uint256 i = begin + offset; i < end; ++i) {\\n      uint8 chr = _tryParseChr(bytes1(_unsafeReadBytesOffset(buffer, i)));\\n      if (chr > 15) return (false, 0);\\n      result *= 16;\\n      unchecked {\\n        // Multiplying by 16 is equivalent to a shift of 4 bits (with additional overflow check).\\n        // This guaratees that adding a value < 16 will not cause an overflow, hence the unchecked.\\n        result += chr;\\n      }\\n    }\\n    return (true, result);\\n  }\\n\\n  /**\\n   * @dev Parse a hexadecimal string (with or without \\\"0x\\\" prefix), and returns the value as an `address`.\\n   *\\n   * Requirements:\\n   * - The string must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n   */\\n  function parseAddress(string memory input) internal pure returns (address) {\\n    return parseAddress(input, 0, bytes(input).length);\\n  }\\n\\n  /**\\n   * @dev Variant of {parseAddress} that parses a substring of `input` located between position `begin` (included) and\\n   * `end` (excluded).\\n   *\\n   * Requirements:\\n   * - The substring must be formatted as `(0x)?[0-9a-fA-F]{40}`\\n   */\\n  function parseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (address) {\\n    (bool success, address value) = tryParseAddress(input, begin, end);\\n    if (!success) revert StringsInvalidAddressFormat();\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Variant of {parseAddress-string} that returns false if the parsing fails because the input is not a properly\\n   * formatted address. See {parseAddress} requirements.\\n   */\\n  function tryParseAddress(string memory input) internal pure returns (bool success, address value) {\\n    return tryParseAddress(input, 0, bytes(input).length);\\n  }\\n\\n  /**\\n   * @dev Variant of {parseAddress-string-uint256-uint256} that returns false if the parsing fails because input is not a properly\\n   * formatted address. See {parseAddress} requirements.\\n   */\\n  function tryParseAddress(string memory input, uint256 begin, uint256 end) internal pure returns (bool success, address value) {\\n    // check that input is the correct length\\n    bool hasPrefix = (begin < end + 1) && bytes2(_unsafeReadBytesOffset(bytes(input), begin)) == bytes2('0x'); // don't do out-of-bound (possibly unsafe) read if sub-string is empty\\n\\n    uint256 expectedLength = 40 + hasPrefix.toUint() * 2;\\n\\n    if (end - begin == expectedLength && end <= bytes(input).length) {\\n      // length guarantees that this does not overflow, and value is at most type(uint160).max\\n      (bool s, uint256 v) = _tryParseHexUintUncheckedBounds(input, begin, end);\\n      return (s, address(uint160(v)));\\n    } else {\\n      return (false, address(0));\\n    }\\n  }\\n\\n  function _tryParseChr(bytes1 chr) private pure returns (uint8) {\\n    uint8 value = uint8(chr);\\n\\n    // Try to parse `chr`:\\n    // - Case 1: [0-9]\\n    // - Case 2: [a-f]\\n    // - Case 3: [A-F]\\n    // - otherwise not supported\\n    unchecked {\\n      if (value > 47 && value < 58) value -= 48;\\n      else if (value > 96 && value < 103) value -= 87;\\n      else if (value > 64 && value < 71) value -= 55;\\n      else return type(uint8).max;\\n    }\\n\\n    return value;\\n  }\\n\\n  /**\\n   * @dev Reads a bytes32 from a bytes array without bounds checking.\\n   *\\n   * NOTE: making this function internal would mean it could be used with memory unsafe offset, and marking the\\n   * assembly block as such would prevent some optimizations.\\n   */\\n  function _unsafeReadBytesOffset(bytes memory buffer, uint256 offset) private pure returns (bytes32 value) {\\n    // This is not memory safe in the general case, but all calls to this private function are within bounds.\\n    assembly ('memory-safe') {\\n      value := mload(add(buffer, add(0x20, offset)))\\n    }\\n  }\\n}\\n\",\"keccak256\":\"0xf90599719c511abac3a05c682f18b6029d29930104d2081933fc6dcdd04a2213\",\"license\":\"MIT\"},\"contracts/WETH9.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-2.0-or-later\\npragma solidity 0.8.20;\\n\\nimport './ERC20.sol';\\n\\n/**\\n * @title WETH9\\n * @dev Wrapped Ether implementation for Quai Network\\n * This contract allows users to wrap their native QAI into an ERC20 token\\n * This is needed for DeFi protocols like Uniswap v3 that require ERC20 tokens\\n */\\ncontract WETH9 is ERC20 {\\n  event Deposit(address indexed dst, uint wad);\\n  event Withdrawal(address indexed src, uint wad);\\n\\n  constructor() ERC20('Wrapped QAI', 'WQAI', 0) {}\\n\\n  /**\\n   * @notice Deposit native token to get wrapped token\\n   */\\n  function deposit() public payable {\\n    _mint(msg.sender, msg.value);\\n    emit Deposit(msg.sender, msg.value);\\n  }\\n\\n  /**\\n   * @notice Withdraw wrapped token to get native token\\n   * @param wad Amount to withdraw\\n   */\\n  function withdraw(uint wad) public {\\n    require(balanceOf(msg.sender) >= wad, 'WETH9: insufficient balance');\\n    // Use transfer to remove tokens from sender's balance\\n    _transfer(msg.sender, address(this), wad);\\n    // Send the equivalent amount of native tokens\\n    payable(msg.sender).transfer(wad);\\n    emit Withdrawal(msg.sender, wad);\\n  }\\n\\n  // Allow receiving native token\\n  receive() external payable {\\n    deposit();\\n  }\\n}\\n\",\"keccak256\":\"0x091f78b5510ce32e43ce65e49a8029158dceb128c4c87eeb2bc88925a4100a95\",\"license\":\"GPL-2.0-or-later\"}},\"version\":1}"